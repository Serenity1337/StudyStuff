TL;DR-------------------------------------------------------------------------------------------------------------------------------------------

(If you're interested to delve deeper, look below TL;DR)

By calling foo(..) with new in front of it, we’ve constructed a new
object and set that new object as the this for the call of foo(..). So
new is the final way that a function call’s this can be bound. We’ll call
this new binding.

TL;DR-------------------------------------------------------------------------------------------------------------------------------------------

The fourth and final rule for this binding requires us to rethink a very
common misconception about functions and objects in JavaScript.
In traditional class-oriented languages, “constructors” are special
methods attached to classes, and when the class is instantiated with a
new operator, the constructor of that class is called. This usually looks
something like:
something = new MyClass(..);

JavaScript has a new operator, and the code pattern to use it looks
basically identical to what we see in those class-oriented languages;
most developers assume that JavaScript’s mechanism is doing some‐
thing similar. However, there really is no connection to class-oriented
functionality implied by new usage in JS.

First, let’s redefine what a “constructor” in JavaScript is. In JS, con‐
structors are just functions that happen to be called with the new op‐
erator in front of them. They are not attached to classes, nor are they
instantiating a class. They are not even special types of functions.
They’re just regular functions that are, in essence, hijacked by the use
of new in their invocation.

For example, consider the Number(..) function acting as a construc‐
tor, quoting from the ES5.1 spec:
15.7.2 The Number Constructor
When Number is called as part of a new expression it is a constructor:
it initialises the newly created object.
So, pretty much any ol’ function, including the built-in object func‐
tions like Number(..) (see Chapter 3) can be called with new in front
of it, and that makes that function call a constructor call. This is an
important but subtle distinction: there’s really no such thing as “con‐
structor functions,” but rather construction calls of functions.
When a function is invoked with new in front of it, otherwise known
as a constructor call, the following things are done automatically:

1. A brand new object is created (aka constructed) out of thin air.
2. The newly constructed object is [[Prototype]]-linked.
3. The newly constructed object is set as the this binding for that
function call.

4. Unless the function returns its own alternate object, the new-
invoked function call will automatically return the newly con‐

structed object.
Steps 1, 3, and 4 apply to our current discussion. We’ll skip over step
2 for now and come back to it in Chapter 5.
Consider this code:

function foo(a) {
this.a = a;
}
var bar = new foo( 2 );
console.log( bar.a ); // 2

