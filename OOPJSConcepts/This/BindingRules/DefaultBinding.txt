TL;DR-------------------------------------------------------------------------------------------------------------------------------------------

(If you're interested to delve deeper, look below TL;DR)

Since the call is plain, it will refer to the window object if it's not in strict mode, if it's in strict mode it will be undefined.

TL;DR-------------------------------------------------------------------------------------------------------------------------------------------

The first rule we will examine comes from the most common case of
function calls: standalone function invocation. Think of this this rule
as the default catch-all rule when none of the other rules apply.

Consider the following code:

function foo() {
console.log( this.a );
}
var a = 2;
foo(); // 2



The first thing to note, if you were not already aware, is that variables
declared in the global scope, as var a = 2 is, are synonymous with
global-object properties of the same name. They’re not copies of each
other, they are each other. Think of it as two sides of the same coin.
Second, we see that when foo() is called, this.a resolves to our global
variable a. Why? Because in this case, the default binding for this
applies to the function call, and so points this at the global object.
How do we know that the default binding rule applies here? We ex‐
amine the call-site to see how foo() is called. In our snippet, foo() is
called with a plain, undecorated function reference. None of the other
rules we will demonstrate will apply here, so the default binding applies
instead.

If strict mode is in effect, the global object is not eligible for the
default binding, so the this is instead set to undefined:
function foo() {
"use strict";
console.log( this.a );
}
var a = 2;
foo(); // TypeError: `this` is `undefined`
A subtle but important detail is that though the overall this binding
rules are entirely based on the call-site, the global object is only eligible
for the default binding if the contents of foo() are not running in